% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_blueprint.R
\name{tar_blueprint}
\alias{tar_blueprint}
\alias{tar_blueprints}
\alias{tar_blueprint_raw}
\title{Add a blueprint to a "targets" pipeline}
\usage{
tar_blueprint(...)

tar_blueprints(directory = here::here("blueprints"), recurse = FALSE)

tar_blueprint_raw(bp)
}
\arguments{
\item{...}{Arguments passed to \code{blueprint()}}

\item{directory}{A folder containing R scripts that evaluate to \code{blueprint()}
objects}

\item{recurse}{Recursively loads blueprints from a directory if \code{TRUE}}

\item{bp}{A blueprint object}
}
\value{
A \code{list()} of \code{tar_target} objects
}
\description{
Unlike drake, which requires some extra metaprogramming to "attach" blueprint
steps to a plan, targets pipelines allow for direct target construction.
Blueprints can thus be added directly into a \code{tar_pipeline()} object using
this function. The arguments for \code{tar_blueprint()} are exactly the same as
\code{blueprint()}. \code{tar_blueprints()} behaves like \code{load_blueprints()} but is
called, like \code{tar_blueprint()}, directly in a \code{tar_pipeline()} object.
}
\section{Empty blueprint folder}{
By default, blueprintr ignore empty blueprint folders. However, it may be beneficial
to warn users if folder is empty, particularly during project setup. This helps
identify any potential misconfiguration of targets generation. To enable these warnings,
set \code{option(blueprintr.warn_empty_blueprints_dirs = TRUE)}.
}

